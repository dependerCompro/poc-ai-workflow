{"ast":null,"code":"import { createVNode as _createVNode, normalizeStyle as _normalizeStyle, withCtx as _withCtx, openBlock as _openBlock, createBlock as _createBlock, createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, normalizeClass as _normalizeClass, Fragment as _Fragment, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_customNode = _resolveComponent(\"customNode\");\n  return _openBlock(), _createElementBlock(_Fragment, null, [_createVNode($setup[\"SideBar\"]), _createVNode($setup[\"VueFlow\"], {\n    nodes: $setup.nodes,\n    edges: $setup.edges,\n    class: _normalizeClass([{\n      dark: $setup.dark\n    }, \"basic-flow\"]),\n    onDrop: $setup.onDrop,\n    onDragover: $setup.onDragOver,\n    onDragleave: $setup.onDragLeave,\n    \"min-zoom\": 0.2,\n    \"max-zoom\": 4\n  }, {\n    \"node-input-prompt\": _withCtx(() => [_createVNode($setup[\"InputPromptNode\"])]),\n    \"node-input-data\": _withCtx(() => [_createVNode($setup[\"InputDataNode\"])]),\n    \"node-processor\": _withCtx(() => [_createVNode(_component_customNode)]),\n    \"node-result-output\": _withCtx(() => [_createVNode(_component_customNode)]),\n    default: _withCtx(() => [_createVNode($setup[\"Background\"], {\n      style: _normalizeStyle({\n        backgroundColor: $setup.isDragOver ? '#e7f3ff' : 'transparent',\n        transition: 'background-color 0.2s ease'\n      }),\n      \"pattern-color\": \"#aaa\",\n      gap: 16\n    }, null, 8 /* PROPS */, [\"style\"]), _createVNode($setup[\"MiniMap\"]), _createVNode($setup[\"Controls\"], {\n      position: \"top-right\"\n    }, {\n      default: _withCtx(() => [_createVNode($setup[\"ControlButton\"], {\n        title: \"Reset Transform\",\n        onClick: $setup.resetTransform\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"Icon\"], {\n          name: \"reset\"\n        })]),\n        _: 1 /* STABLE */\n      }), _createVNode($setup[\"ControlButton\"], {\n        title: \"Toggle Dark Mode\",\n        onClick: $setup.toggleDarkMode\n      }, {\n        default: _withCtx(() => [$setup.dark ? (_openBlock(), _createBlock($setup[\"Icon\"], {\n          key: 0,\n          name: \"sun\"\n        })) : (_openBlock(), _createBlock($setup[\"Icon\"], {\n          key: 1,\n          name: \"moon\"\n        }))]),\n        _: 1 /* STABLE */\n      }), _createVNode($setup[\"ControlButton\"], {\n        title: \"Log `toObject`\",\n        onClick: $setup.logToObject\n      }, {\n        default: _withCtx(() => [_createVNode($setup[\"Icon\"], {\n          name: \"log\"\n        })]),\n        _: 1 /* STABLE */\n      })]),\n      _: 1 /* STABLE */\n    })]),\n    _: 1 /* STABLE */\n  }, 8 /* PROPS */, [\"nodes\", \"edges\", \"class\"])], 64 /* STABLE_FRAGMENT */);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_createVNode","$setup","nodes","edges","class","_normalizeClass","dark","onDrop","onDragover","onDragOver","onDragleave","onDragLeave","_withCtx","_component_customNode","default","style","_normalizeStyle","isDragOver","gap","position","title","onClick","resetTransform","name","_","toggleDarkMode","_createBlock","key","logToObject"],"sources":["D:\\poc-ai-workflow\\src\\App.vue"],"sourcesContent":["<template>\r\n  <SideBar />\r\n  <VueFlow :nodes=\"nodes\" :edges=\"edges\" :class=\"{ dark }\" class=\"basic-flow\" @drop=\"onDrop\" @dragover=\"onDragOver\"\r\n    @dragleave=\"onDragLeave\" :min-zoom=\"0.2\" :max-zoom=\"4\">\r\n    <Background :style=\"{\r\n      backgroundColor: isDragOver ? '#e7f3ff' : 'transparent',\r\n      transition: 'background-color 0.2s ease',\r\n    }\" pattern-color=\"#aaa\" :gap=\"16\" />\r\n\r\n    <MiniMap />\r\n\r\n    <Controls position=\"top-right\">\r\n      <ControlButton title=\"Reset Transform\" @click=\"resetTransform\">\r\n        <Icon name=\"reset\" />\r\n      </ControlButton>\r\n      <ControlButton title=\"Toggle Dark Mode\" @click=\"toggleDarkMode\">\r\n        <Icon v-if=\"dark\" name=\"sun\" />\r\n        <Icon v-else name=\"moon\" />\r\n      </ControlButton>\r\n      <ControlButton title=\"Log `toObject`\" @click=\"logToObject\">\r\n        <Icon name=\"log\" />\r\n      </ControlButton>\r\n    </Controls>\r\n    <template #node-input-prompt>\r\n      <InputPromptNode />\r\n    </template>\r\n    <template #node-input-data>\r\n      <InputDataNode />\r\n    </template>\r\n    <template #node-processor>\r\n      <customNode />\r\n    </template>\r\n    <template #node-result-output>\r\n      <customNode />\r\n    </template>\r\n  </VueFlow>\r\n</template>\r\n\r\n<script setup>\r\nimport { ref, computed, watch } from 'vue'\r\nimport { VueFlow, useVueFlow, Position } from '@vue-flow/core'\r\nimport { Background } from '@vue-flow/background'\r\nimport { ControlButton, Controls } from '@vue-flow/controls'\r\nimport { MiniMap } from '@vue-flow/minimap'\r\nimport Icon from './components/ControlIcons.vue'\r\nimport SideBar from './components/SideBar.vue'\r\nimport { useDragAndDropStore } from '@/stores/index.js';\r\nimport InputPromptNode from '@/components/CustomNode.vue';\r\nimport InputDataNode from '@/components/CustomNode.vue';\r\nimport ProcessorNode from '@/components/CustomNode.vue';\r\nimport OutputNode from '@/components/CustomNode.vue';\r\n\r\nconst { onNodeDragStop, onConnect, setViewport, toObject, screenToFlowCoordinate } = useVueFlow()\r\n\r\nconst dark = ref(false)\r\nconst store = useDragAndDropStore()\r\nconst nodeCount = ref(0)\r\n\r\nconst draggedType = computed(() => store.draggedType)\r\nconst isDragging = computed(() => store.isDragging)\r\nconst isDragOver = computed(() => store.isDragOver)\r\nconst nodes = computed(() => store.nodes)\r\nconst edges = computed(() => store.edges)\r\n\r\nwatch(isDragging, (dragging) => {\r\n  document.body.style.userSelect = dragging ? 'none' : ''\r\n})\r\n\r\nconst toggleDarkMode = () => {\r\n  dark.value = !dark.value\r\n}\r\n\r\nconst resetTransform = () => {\r\n  setViewport({ x: 0, y: 0, zoom: 1 })\r\n}\r\n\r\nconst logToObject = () => {\r\n  console.log(toObject())\r\n}\r\n\r\nconst getNewNodeId = (type) => {\r\n  const timeStamp = Date.now()\r\n  return `${timeStamp}-${type}-${nodeCount.value++}`\r\n}\r\n\r\nconst getNewEdgeId = (src, tgt) => {\r\n  return src + \"___\" + tgt;\r\n}\r\n\r\nconst onDrop = (event) => {\r\n  const position = screenToFlowCoordinate({\r\n    x: event.clientX - 75, // - 275 - 75,\r\n    y: event.clientY - 18, // - 18,\r\n  })\r\n\r\n  const nodeId = getNewNodeId(draggedType.value)\r\n\r\n  const newNode = {\r\n    id: nodeId,\r\n    type: draggedType.value,\r\n    position: position,\r\n    data: { label: `${draggedType.value} ${nodeCount.value}` },\r\n    sourcePosition: Position.Right, // if this node is a source node.\r\n    targetPosition: Position.Left // if this node is a target node.\r\n  }\r\n  nodes.value.push(newNode)\r\n}\r\n\r\nconst onDragOver = (event) => {\r\n  event.preventDefault()\r\n  if (draggedType.value) {\r\n    store.isDragOver = true\r\n    if (event.dataTransfer) {\r\n      event.dataTransfer.dropEffect = 'move'\r\n    }\r\n  }\r\n}\r\n\r\nconst onDragLeave = () => {\r\n  store.isDragOver = false\r\n}\r\n\r\nonNodeDragStop(({ event, node }) => {\r\n  nodes.value.forEach((obj) => {\r\n    if (obj.id == node.id) {\r\n      obj.position.x = event.clientX - 75 - 275;\r\n      obj.position.y = event.clientY - 18;\r\n    }\r\n  })\r\n})\r\n\r\nonConnect((event) => {\r\n  const edgeId = getNewEdgeId(event.source, event.target);\r\n  const newEdge = {\r\n    id: edgeId,\r\n    source: event.source,\r\n    target: event.target,\r\n    animated: true,\r\n  }\r\n  edges.value.push(newEdge);\r\n})\r\n</script>\r\n\r\n<style>\r\n@import '@vue-flow/core/dist/style.css';\r\n@import '@vue-flow/core/dist/theme-default.css';\r\n@import './main.css';\r\n\r\n#app {\r\n  display: flex;\r\n}\r\n</style>\r\n"],"mappings":";;;uBAAAA,mBAAA,CAAAC,SAAA,SACEC,YAAA,CAAWC,MAAA,cACXD,YAAA,CAiCUC,MAAA;IAjCAC,KAAK,EAAED,MAAA,CAAAC,KAAK;IAAGC,KAAK,EAAEF,MAAA,CAAAE,KAAK;IAAGC,KAAK,EAF/CC,eAAA;MAAAC,IAAA,EAEmDL,MAAA,CAAAK;IAAI,GAAU,YAAY;IAAEC,MAAI,EAAEN,MAAA,CAAAM,MAAM;IAAGC,UAAQ,EAAEP,MAAA,CAAAQ,UAAU;IAC7GC,WAAS,EAAET,MAAA,CAAAU,WAAW;IAAG,UAAQ,EAAE,GAAG;IAAG,UAAQ,EAAE;;IAoBzC,mBAAiB,EAAAC,QAAA,CAC1B,MAAmB,CAAnBZ,YAAA,CAAmBC,MAAA,qB;IAEV,iBAAe,EAAAW,QAAA,CACxB,MAAiB,CAAjBZ,YAAA,CAAiBC,MAAA,mB;IAER,gBAAc,EAAAW,QAAA,CACvB,MAAc,CAAdZ,YAAA,CAAca,qBAAA,E;IAEL,oBAAkB,EAAAD,QAAA,CAC3B,MAAc,CAAdZ,YAAA,CAAca,qBAAA,E;IAjCpBC,OAAA,EAAAF,QAAA,CAII,MAGoC,CAHpCZ,YAAA,CAGoCC,MAAA;MAHvBc,KAAK,EAJtBC,eAAA;yBAIkDf,MAAA,CAAAgB,UAAU;;;MAGrD,eAAa,EAAC,MAAM;MAAEC,GAAG,EAAE;wCAE9BlB,YAAA,CAAWC,MAAA,cAEXD,YAAA,CAWWC,MAAA;MAXDkB,QAAQ,EAAC;IAAW;MAXlCL,OAAA,EAAAF,QAAA,CAYM,MAEgB,CAFhBZ,YAAA,CAEgBC,MAAA;QAFDmB,KAAK,EAAC,iBAAiB;QAAEC,OAAK,EAAEpB,MAAA,CAAAqB;;QAZrDR,OAAA,EAAAF,QAAA,CAaQ,MAAqB,CAArBZ,YAAA,CAAqBC,MAAA;UAAfsB,IAAI,EAAC;QAAO,G;QAb1BC,CAAA;UAeMxB,YAAA,CAGgBC,MAAA;QAHDmB,KAAK,EAAC,kBAAkB;QAAEC,OAAK,EAAEpB,MAAA,CAAAwB;;QAftDX,OAAA,EAAAF,QAAA,CAgBQ,MAA+B,CAAnBX,MAAA,CAAAK,IAAI,I,cAAhBoB,YAAA,CAA+BzB,MAAA;UAhBvC0B,GAAA;UAgB0BJ,IAAI,EAAC;6BACvBG,YAAA,CAA2BzB,MAAA;UAjBnC0B,GAAA;UAiBqBJ,IAAI,EAAC;;QAjB1BC,CAAA;UAmBMxB,YAAA,CAEgBC,MAAA;QAFDmB,KAAK,EAAC,gBAAgB;QAAEC,OAAK,EAAEpB,MAAA,CAAA2B;;QAnBpDd,OAAA,EAAAF,QAAA,CAoBQ,MAAmB,CAAnBZ,YAAA,CAAmBC,MAAA;UAAbsB,IAAI,EAAC;QAAK,G;QApBxBC,CAAA;;MAAAA,CAAA;;IAAAA,CAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}